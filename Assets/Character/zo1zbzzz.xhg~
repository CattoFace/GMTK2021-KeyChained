using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class CharControl : MonoBehaviour
{
    public float maxSpeed = 30f;
    public float jumpForce = 30f;
    private bool jump = false;
    private float move = 0f;
    private Vector3 m_Velocity = Vector3.zero;
    private bool m_FacingRight;
    private readonly float m_MovementSmoothing = .05f;
    private bool isGrounded;
    public LayerMask ground;


    // Update is called once per frame
    void Update()
    {
        move = Input.GetAxis("Horizontal");
        jump = Input.GetButton("Jump");
        isGrounded = GetComponent<EdgeCollider2D>().IsTouchingLayers(ground);
        GetComponent<Animator>().SetBool("Air", !isGrounded);
        GetComponent<Animator>().SetBool("Jump", jump);
        GetComponent<Animator>().SetBool("Run", Mathf.Abs(move) > 0.1&&Mathf.Abs(GetComponent<Rigidbody2D>().velocity.x)>=0.1);

    }
    private void FixedUpdate()
    {
        // Move the character by finding the target velocity
        Vector3 targetVelocity = new Vector2(move * maxSpeed, GetComponent<Rigidbody2D>().velocity.y);
        // And then smoothing it out and applying it to the character
        GetComponent<Rigidbody2D>().velocity = Vector3.SmoothDamp(GetComponent<Rigidbody2D>().velocity, targetVelocity, ref m_Velocity, m_MovementSmoothing);
        // If the input is moving the player right and the player is facing left...
        if (move < 0 && !m_FacingRight)
        {
            // ... flip the player.
            Flip();
        }
        // Otherwise if the input is moving the player left and the player is facing right...
        else if (move > 0 && m_FacingRight)
        {
            // ... flip the player.
            Flip();
        }
        if (jump && isGrounded)
        {
            print("test");
            Vector2 v = GetComponent<Rigidbody2D>().velocity;
            v.y = jumpForce;
            GetComponent<Rigidbody2D>().velocity = v;
        }
    }

    private void Flip()
    {
        // Switch the way the player is labelled as facing.
        m_FacingRight = !m_FacingRight;

        // Multiply the player's x local scale by -1.
        Vector3 theScale = transform.localScale;
        theScale.x *= -1;
        transform.localScale = theScale;
    }
}
